/*  This CSS began with what Udacity provided. I still haven't switched to
    bootstrap or a CSS framework, but am close to appreciating what it does.
*/

/* Assists with the auto sorting of cards */
html {
  box-sizing: border-box;
}

/* Resets the CSS for the entire DOM */
*,
*::before,
*::after {
    box-sizing: inherit;
}

/* Fills page based off viewport */
html,
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: Helvetica, Arial, sans-serif;
}

/* only used for background image */
body {
  /* Lesson learned, you use the .. to reference child directories */
  background: url("../img/images.jpg");
  background-color: #e2dc9f; /*in case image doesn't load*/
}

/* needed for auto aranging the cards */
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

h1 {
  color: black;
  text-align: center;
}

header strong {
  font-size: 2em;
}

/* I made this game responsive to screen size, but found static pixel
references to be much more predictable than relative ones */
.deck {
  /* size handled in media queries */
  background: linear-gradient(160deg, blue 0%, green 100%);
  border-radius: 10px;
  box-shadow: 12px 15px 20px 0 rgba(41,61,73,0.5);
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between; /*????? */
  align-items: center;
  margin: 0 0 3em;
}

.deck .card {
   /* size handled in media queries */
  background: #120e20;
  font-size: 0; /*hides icons when they are face down*/
  color: #fff;
  border-radius: 8px;
  cursor: pointer;
  /* next three lines assist in centering the icons on the card */
  display: flex;
  justify-content: center;
  align-items: center;
  /* Very faint shadow for each card */
  box-shadow: 5px 2px 20px 0 rgba(46, 61, 73, 0.5);
}

/* yellow outline for card selection, not sure what this looks like on a touch
  screen */
.deck .card:hover{
  box-shadow:  0px 0px 60px 8px rgba(209, 208, 79, 1);
}

.deck .card.open {
  transform: rotateY(180deg);
  transition: 0.6s;
  background-color: #12ad9e;
  cursor: default;
  color: #c9c9c9;
}

.deck .card.match {
  transform: rotateY(180deg);
  cursor: default;
  background: #a551f9;
  color: #151618;
}

.deck .card.mismatch {
  transform: rotateY(180deg);
  transition: 0.4s;
  cursor: default;
  background: #fa312a;
  color: #151618;
}

.deck .card.return {
/*not sure why, but 360deg rotation created the flip back effect*/
/* I have much to learn on CSS animations */
  transform: rotateY(360deg);
  transition: 0.4s;
  cursor: default;
}

/*score panel*/
.score-panel {
  text-align: center;
  width: 345px; /* good enough for all screen sizes */
  margin-bottom: 10px;
}

.score-panel .star {
  margin: 0;
  padding: 0;
  margin: 0 5px 0 0;
}

.score-panel .stars li {
  list-style: none;
  float: left;
  color: #384071;
}

.score-panel .restart {
  float: right;
  cursor: pointer;
}

/*built this before I realized that a modal does the same thing*/
/*https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_overlay_text*/
#overlay {
  position: absolute;
  display: none; /*we'll toggle this in the JS*/
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,255,0.8);
  z-index: 2; /*this is a vertical layering index*/
}

/* http://www.vikaskbh.com/five-css-techniques-make-overlay-div-centered/ */
/* method 3 is what worked well for me  */
#overlay-container {
  display: none; /*we'll toggle this in the JS*/
  position: relative;
  text-align: center;
  top: 35%;
  width: 100%;
  height: 100%;
  z-index: 3;  /* Puts this on top of the overlay */
}

/*may need a graphic designer, I thought green on blue was cool*/
#thumbs-up {
  color: #afbf2a;
}

#overlay h1 {
  color: #fff;
  font-size: 2em;
}

#game-data {
  font-size: 1.1em;
  color: #fff;
}

/* decorated button */
#play-button {
  margin-top: 15px;
  background-color: #242857;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;
}

/*reverse button and font color upon cursor hover */
#play-button:hover {
  color: #000;
  font-weight: bold;
  background-color: #afbf2a;
}

/* *******MEDIA QUERIES********* */

/*Galaxy S5 (small cell phone) (360 pixel-width)*/
@media only screen and (max-width: 364px) {
  .deck {
    width: 320px;
    min-height: 400px;
    padding: 14px;
  }
  .deck .card {
    height: 75px;
    width: 60px;
    margin-top: 20px;
  }
  .deck .card.open {
    font-size: 1.5em;
  }
  .deck .card.match {
    font-size: 1.5em;
  }
  .deck .card.mismatch {
    font-size: 1.5em;
  }
  .score-panel {
    padding-right: 10px;
  }
  .deck .card:hover{
    box-shadow:  0px 0px 10px 2px rgba(209, 208, 79, 1);
  }
}

/*most normal cell phones (360-420 pixel-width)*/
 @media only screen and (min-width: 365px) and (max-width: 699px) {
  .deck {
    width: 360px;
    min-height: 400px;
    padding: 14px;
  }
  .deck .card {
    height: 75px;
    width: 72px;
    margin-top: 30px;
  }
  .deck .card.open {
    font-size: 1.5em;
  }
  .deck .card.match {
    font-size: 1.5em;
  }
  .deck .card.mismatch {
    font-size: 1.5em;
  }
  .score-panel {
    padding-right: 10px;
  }
  .deck .card:hover{
    box-shadow:  0px 0px 10px 2px rgba(209, 208, 79, 1);
  }
}

/* Tablets and PCs, I kept these together because it looked really weird
    when I stretched the cards into wide rectangles */
 @media only screen and (min-width: 700px) /*and (max-width: 1040px)*/ {
  .deck {
    width: 710px;
    min-height: 680px;
    padding: 32px;
  }
  .deck .card {
    height: 135px;
    width: 135px;
    margin-top: 49px;
  }
  .deck .card.open {
    font-size: 2.5em;
  }
  .deck .card.match {
    font-size: 2.5em;
  }
  .deck .card.mismatch {
    font-size: 2.5em;
  }
  .score-panel {
    padding-right: 10px;
  }
}
